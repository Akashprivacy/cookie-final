



import React, { useState } from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { VulnerabilityScanResult, RiskLevel, VulnerabilityFinding } from '../types';
import { AlertOctagonIcon, CheckCircleIcon, CodeBracketIcon, ShieldExclamationIcon, CookieCareLogo, FileTextIcon } from './Icons';

const getRiskStyle = (riskLevel: RiskLevel) => {
    switch (riskLevel) {
        case 'Critical': return { text: 'text-red-600 dark:text-red-400', border: 'border-red-500', bg: 'bg-red-50 dark:bg-red-900/20', icon: <ShieldExclamationIcon className="h-5 w-5" /> };
        case 'High': return { text: 'text-orange-600 dark:text-orange-400', border: 'border-orange-500', bg: 'bg-orange-50 dark:bg-orange-900/20', icon: <AlertOctagonIcon className="h-5 w-5" /> };
        case 'Medium': return { text: 'text-yellow-600 dark:text-yellow-400', border: 'border-yellow-500', bg: 'bg-yellow-50 dark:bg-yellow-900/20', icon: <AlertOctagonIcon className="h-5 w-5" /> };
        case 'Low': return { text: 'text-blue-600 dark:text-blue-400', border: 'border-blue-500', bg: 'bg-blue-50 dark:bg-blue-900/20', icon: <CheckCircleIcon className="h-5 w-5" /> };
        case 'Informational': return { text: 'text-slate-500 dark:text-slate-400', border: 'border-slate-400', bg: 'bg-slate-100 dark:bg-slate-800/20', icon: <CheckCircleIcon className="h-5 w-5" /> };
        default: return { text: 'text-slate-500', border: 'border-slate-400', bg: 'bg-slate-100 dark:bg-slate-800/20', icon: <CheckCircleIcon className="h-5 w-5" /> };
    }
};

const getScoreColor = (score: number) => { // score 0-10
    if (score >= 8.0) return 'text-red-500';
    if (score >= 4.0) return 'text-yellow-500';
    return 'text-green-500';
}

const ScoreGauge: React.FC<{ score: number }> = ({ score }) => {
    const displayScore = score.toFixed(1);
    const percentage = score * 10;
    return (
        <div className="relative w-40 h-40">
            <svg className="w-full h-full" viewBox="0 0 36 36">
                <path
                    className="text-[var(--bg-tertiary)]"
                    stroke="currentColor"
                    strokeWidth="3.5"
                    fill="none"
                    d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                />
                <path
                    className={getScoreColor(score)}
                    stroke="currentColor"
                    strokeWidth="3.5"
                    strokeLinecap="round"
                    fill="none"
                    strokeDasharray={`${percentage}, 100`}
                    d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                />
            </svg>
            <div className="absolute inset-0 flex flex-col items-center justify-center">
                <span className={`text-4xl font-bold ${getScoreColor(score)}`}>{displayScore}</span>
                <span className="text-sm font-semibold text-[var(--text-primary)]">Score</span>
            </div>
        </div>
    );
}

const VulnerabilityCard: React.FC<{ finding: VulnerabilityFinding }> = ({ finding }) => {
    const [isOpen, setIsOpen] = useState(false);
    const { text, bg, border, icon } = getRiskStyle(finding.riskLevel);

    return (
        <div className={`rounded-lg border shadow-sm ${bg} ${border}`}>
            <button onClick={() => setIsOpen(!isOpen)} className="w-full text-left p-4 flex items-center justify-between" aria-expanded={isOpen}>
                <div className="flex items-center gap-3">
                    <span className={text}>{icon}</span>
                    <h3 className="font-semibold text-md text-[var(--text-headings)]">{finding.name}</h3>
                </div>
                <div className="flex items-center gap-4">
                    <span className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-medium ${bg} ${text} border ${border}`}>{finding.riskLevel}</span>
                    <svg className={`w-5 h-5 text-[var(--text-primary)] transform transition-transform ${isOpen ? 'rotate-180' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" /></svg>
                </div>
            </button>
            {isOpen && (
                <div className="px-5 pb-5 pt-2 border-t border-[var(--border-primary)] space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                            <h4 className="font-semibold text-[var(--text-headings)]">Category</h4>
                            <p className="text-[var(--text-primary)] mt-1">{finding.category}</p>
                        </div>
                        <div>
                            <h4 className="font-semibold text-[var(--text-headings)]">Impact</h4>
                            <p className="text-[var(--text-primary)] mt-1">{finding.impact}</p>
                        </div>
                    </div>
                    <div>
                        <h4 className="text-sm font-semibold text-[var(--text-headings)]">Description</h4>
                        <p className="text-sm text-[var(--text-primary)] mt-1">{finding.description}</p>
                    </div>
                     <div>
                        <h4 className="text-sm font-semibold text-orange-600 dark:text-orange-400">Evidence</h4>
                        <div className="mt-2 p-3 bg-[var(--bg-primary)] rounded-md border border-[var(--border-primary)]">
                          <pre className="text-xs text-orange-700 dark:text-orange-300 whitespace-pre-wrap font-mono break-all"><code>{finding.evidence}</code></pre>
                        </div>
                    </div>
                    <div>
                        <h4 className="text-sm font-semibold text-green-600 dark:text-green-400">Remediation Plan</h4>
                        <div className="mt-2 p-3 bg-[var(--bg-primary)] rounded-md border border-[var(--border-primary)]">
                          <pre className="text-sm text-green-700 dark:text-green-300 whitespace-pre-wrap font-mono"><code>{finding.remediation}</code></pre>
                        </div>
                    </div>
                    {finding.references?.length > 0 && (
                        <div>
                             <h4 className="text-sm font-semibold text-[var(--text-headings)]">References</h4>
                             <ul className="text-sm text-[var(--text-primary)] mt-1 list-disc list-inside">
                                {finding.references.map(ref => (
                                    <li key={ref.url}>
                                        <a href={ref.url} target="_blank" rel="noopener noreferrer" className="text-brand-blue hover:underline">{ref.title}</a>
                                    </li>
                                ))}
                             </ul>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

export const VulnerabilityReportDisplay: React.FC<{ result: VulnerabilityScanResult; scannedUrl: string }> = ({ result, scannedUrl }) => {
    const [isExporting, setIsExporting] = useState(false);

    const handleExportPDF = async () => {
        setIsExporting(true);
        const input = document.getElementById('pdf-export-area-vuln');
        const exportButton = document.getElementById('export-button-vuln');

        if (!input) {
            setIsExporting(false);
            return;
        }

        if (exportButton) exportButton.style.visibility = 'hidden';

        const canvas = await html2canvas(input, {
            scale: 2,
            useCORS: true,
            backgroundColor: getComputedStyle(document.body).backgroundColor,
        });

        if (exportButton) exportButton.style.visibility = 'visible';
        
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF('p', 'mm', 'a4');
        
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = pdf.internal.pageSize.getHeight();
        const imgWidth = canvas.width;
        const imgHeight = canvas.height;
        
        const ratio = imgWidth / pdfWidth;
        const imgHeightOnPdf = imgHeight / ratio;
        
        let heightLeft = imgHeightOnPdf;
        let position = 0;
        
        pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeightOnPdf);
        heightLeft -= pdfHeight;
        
        while (heightLeft > 0) {
            position -= pdfHeight;
            pdf.addPage();
            pdf.addImage(imgData, 'PNG', 0, position, pdfWidth, imgHeightOnPdf);
            heightLeft -= pdfHeight;
        }
        
        const pageCount = pdf.getNumberOfPages();
        for (let i = 1; i <= pageCount; i++) {
            pdf.setPage(i);
            pdf.setFontSize(16);
            pdf.setTextColor('#2563eb');
            pdf.text('Vulnerability Scan Report', 15, 15);
            pdf.setFontSize(8);
            pdf.setTextColor(100);
            pdf.text(`URL: ${scannedUrl}`, 15, 20);
            
            pdf.setFontSize(8);
            pdf.setTextColor(150);
            pdf.text(`Page ${i} of ${pageCount}`, pdfWidth - 35, pdfHeight - 10);
            pdf.text(`Generated on ${new Date().toLocaleDateString()} by Cookie Care`, 15, pdfHeight - 10);
        }
        
        const hostname = new URL(scannedUrl).hostname;
        pdf.save(`Vulnerability-Report-${hostname}.pdf`);
        setIsExporting(false);
    };
    
    const riskCounts = result.findings.reduce((acc, v) => {
        const risk = v.riskLevel || 'Unknown';
        acc[risk] = (acc[risk] || 0) + 1;
        return acc;
    }, {} as Record<string, number>);

    return (
        <div className="max-w-7xl mx-auto animate-fade-in-up">
            <div id="pdf-export-area-vuln" className="bg-[var(--bg-primary)] p-2 sm:p-0">
                <div className="flex justify-between items-start mb-6">
                    <div>
                        <h3 className="text-2xl font-bold text-[var(--text-headings)]">Vulnerability Report</h3>
                        <p className="text-[var(--text-primary)] mt-1">
                        Report for: <a href={scannedUrl} target="_blank" rel="noopener noreferrer" className="font-semibold text-brand-blue hover:underline">{new URL(scannedUrl).hostname}</a>
                        </p>
                    </div>
                    <button
                        id="export-button-vuln"
                        onClick={handleExportPDF}
                        disabled={isExporting}
                        className="flex items-center justify-center gap-2 px-4 py-2 font-semibold text-sm text-brand-blue border border-brand-blue rounded-md hover:bg-brand-blue/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-[var(--bg-primary)] focus:ring-brand-blue transition-all duration-200 disabled:bg-slate-400 disabled:text-white dark:disabled:bg-slate-600 disabled:border-slate-400 disabled:cursor-not-allowed"
                    >
                        <FileTextIcon className="h-4 w-4" />
                        {isExporting ? 'Exporting...' : 'Export to PDF'}
                    </button>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    {/* Left Column: Summary & Score */}
                    <div className="lg:col-span-1 space-y-6">
                        <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6 flex flex-col items-center">
                            <ScoreGauge score={result.overallRisk.score} />
                            <div className="text-center mt-4">
                                <h4 className="text-lg font-bold text-[var(--text-headings)]">Overall Risk: <span className={getRiskStyle(result.overallRisk.level).text}>{result.overallRisk.level}</span></h4>
                                <p className="text-sm text-[var(--text-primary)] mt-2">{result.overallRisk.summary}</p>
                            </div>
                        </div>
                        <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6">
                             <h4 className="text-lg font-bold text-[var(--text-headings)] mb-4">Findings Summary</h4>
                             <div className="space-y-2">
                                 {(['Critical', 'High', 'Medium', 'Low', 'Informational'] as RiskLevel[]).map(level => {
                                     const count = riskCounts[level] || 0;
                                     if (count === 0 && !result.findings.some(f => f.riskLevel === level)) return null;
                                     const { text, icon } = getRiskStyle(level);
                                     return (
                                         <div key={level} className="flex items-center justify-between text-sm">
                                             <div className={`flex items-center gap-2 font-semibold ${text}`}>
                                                {icon}
                                                <span>{level} Risk</span>
                                             </div>
                                             <span className="font-bold text-[var(--text-headings)]">{count}</span>
                                         </div>
                                     )
                                 })}
                             </div>
                        </div>
                    </div>

                    {/* Right Column: Vulnerabilities */}
                    <div className="lg:col-span-2">
                         <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6">
                            <h4 className="text-lg font-bold text-[var(--text-headings)] mb-4">Vulnerabilities Found ({result.findings.length})</h4>
                            {result.findings.length > 0 ? (
                                <div className="space-y-4">
                                    {result.findings.map((finding, index) => <VulnerabilityCard key={index} finding={finding} />)}
                                </div>
                            ) : (
                                <div className="text-center py-12 border-2 border-dashed border-[var(--border-primary)] rounded-lg">
                                    <CheckCircleIcon className="mx-auto h-12 w-12 text-green-500" />
                                    <h3 className="mt-2 text-lg font-medium text-[var(--text-headings)]">No Vulnerabilities Found</h3>
                                    <p className="mt-1 text-sm text-[var(--text-primary)]">This passive scan did not identify any common vulnerabilities.</p>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
                <div className="text-center mt-12 text-xs text-[var(--text-primary)]/70">
                    <p><strong>Disclaimer:</strong> This report represents an exhaustive, non-intrusive audit based on an AI-powered analysis of publicly accessible data. For assessments requiring authentication or intrusive testing, a full-scope penetration test is recommended as a complementary exercise.</p>
                </div>
            </div>
        </div>
    );
};