
import React, { useState } from 'react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { VulnerabilityScanResult, RiskLevel, VulnerabilityFinding } from '../types';
import { AlertOctagonIcon, CheckCircleIcon, CodeBracketIcon, ShieldExclamationIcon, CookieCareLogo, FileTextIcon } from './Icons';

const getRiskStyle = (riskLevel: RiskLevel) => {
    switch (riskLevel) {
        case 'Critical': return { text: 'text-red-600 dark:text-red-400', border: 'border-red-500', bg: 'bg-red-50 dark:bg-red-900/20', icon: <ShieldExclamationIcon className="h-5 w-5" />, chartFill: 'hsl(0, 72%, 51%)' };
        case 'High': return { text: 'text-orange-600 dark:text-orange-400', border: 'border-orange-500', bg: 'bg-orange-50 dark:bg-orange-900/20', icon: <AlertOctagonIcon className="h-5 w-5" />, chartFill: 'hsl(30, 90%, 55%)' };
        case 'Medium': return { text: 'text-yellow-600 dark:text-yellow-400', border: 'border-yellow-500', bg: 'bg-yellow-50 dark:bg-yellow-900/20', icon: <AlertOctagonIcon className="h-5 w-5" />, chartFill: 'hsl(45, 90%, 55%)' };
        case 'Low': return { text: 'text-blue-600 dark:text-blue-400', border: 'border-blue-500', bg: 'bg-blue-50 dark:bg-blue-900/20', icon: <CheckCircleIcon className="h-5 w-5" />, chartFill: 'hsl(210, 90%, 50%)' };
        case 'Informational': return { text: 'text-slate-500 dark:text-slate-400', border: 'border-slate-400', bg: 'bg-slate-100 dark:bg-slate-800/20', icon: <CheckCircleIcon className="h-5 w-5" />, chartFill: 'hsl(220, 10%, 50%)' };
        default: return { text: 'text-slate-500', border: 'border-slate-400', bg: 'bg-slate-100 dark:bg-slate-800/20', icon: <CheckCircleIcon className="h-5 w-5" />, chartFill: 'hsl(220, 10%, 50%)' };
    }
};

const getScoreColor = (score: number) => { // score 0-10
    if (score >= 8.0) return 'text-red-500';
    if (score >= 4.0) return 'text-yellow-500';
    return 'text-green-500';
}

const ScoreGauge: React.FC<{ score: number }> = ({ score }) => {
    const displayScore = score.toFixed(1);
    const percentage = score * 10;
    return (
        <div className="relative w-40 h-40">
            <svg className="w-full h-full" viewBox="0 0 36 36">
                <path
                    className="text-[var(--bg-tertiary)]"
                    stroke="currentColor"
                    strokeWidth="3.5"
                    fill="none"
                    d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                />
                <path
                    className={getScoreColor(score)}
                    stroke="currentColor"
                    strokeWidth="3.5"
                    strokeLinecap="round"
                    fill="none"
                    strokeDasharray={`${percentage}, 100`}
                    d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                />
            </svg>
            <div className="absolute inset-0 flex flex-col items-center justify-center">
                <span className={`text-4xl font-bold ${getScoreColor(score)}`}>{displayScore}</span>
                <span className="text-sm font-semibold text-[var(--text-primary)]">Score</span>
            </div>
        </div>
    );
}

const VulnerabilityCard: React.FC<{ finding: VulnerabilityFinding }> = ({ finding }) => {
    const [isOpen, setIsOpen] = useState(false);
    const { text, bg, border, icon } = getRiskStyle(finding.riskLevel);

    return (
        <div className={`rounded-lg border shadow-sm ${bg} ${border}`}>
            <button onClick={() => setIsOpen(!isOpen)} className="w-full text-left p-4 flex items-center justify-between" aria-expanded={isOpen}>
                <div className="flex items-center gap-3">
                    <span className={text}>{icon}</span>
                    <h3 className="font-semibold text-md text-[var(--text-headings)]">{finding.name}</h3>
                </div>
                <div className="flex items-center gap-4">
                    <span className={`inline-flex items-center rounded-full px-3 py-1 text-xs font-medium ${bg} ${text} border ${border}`}>{finding.riskLevel}</span>
                    <svg className={`w-5 h-5 text-[var(--text-primary)] transform transition-transform ${isOpen ? 'rotate-180' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7" /></svg>
                </div>
            </button>
            {isOpen && (
                <div className="px-5 pb-5 pt-2 border-t border-[var(--border-primary)] space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                            <h4 className="font-semibold text-[var(--text-headings)]">Category</h4>
                            <p className="text-[var(--text-primary)] mt-1">{finding.category}</p>
                        </div>
                        <div>
                            <h4 className="font-semibold text-[var(--text-headings)]">Impact</h4>
                            <p className="text-[var(--text-primary)] mt-1">{finding.impact}</p>
                        </div>
                    </div>
                    <div>
                        <h4 className="text-sm font-semibold text-[var(--text-headings)]">Description</h4>
                        <p className="text-sm text-[var(--text-primary)] mt-1">{finding.description}</p>
                    </div>
                     <div>
                        <h4 className="text-sm font-semibold text-orange-600 dark:text-orange-400">Evidence</h4>
                        <div className="mt-2 p-3 bg-[var(--bg-primary)] rounded-md border border-[var(--border-primary)]">
                          <pre className="text-xs text-orange-700 dark:text-orange-300 whitespace-pre-wrap font-mono break-all"><code>{finding.evidence}</code></pre>
                        </div>
                    </div>
                    <div>
                        <h4 className="text-sm font-semibold text-green-600 dark:text-green-400">Remediation Plan</h4>
                        <div className="mt-2 p-3 bg-[var(--bg-primary)] rounded-md border border-[var(--border-primary)]">
                          <pre className="text-sm text-green-700 dark:text-green-300 whitespace-pre-wrap font-mono"><code>{finding.remediation}</code></pre>
                        </div>
                    </div>
                    {finding.references?.length > 0 && (
                        <div>
                             <h4 className="text-sm font-semibold text-[var(--text-headings)]">References</h4>
                             <ul className="text-sm text-[var(--text-primary)] mt-1 list-disc list-inside">
                                {finding.references.map(ref => (
                                    <li key={ref.url}>
                                        <a href={ref.url} target="_blank" rel="noopener noreferrer" className="text-brand-blue hover:underline">{ref.title}</a>
                                    </li>
                                ))}
                             </ul>
                        </div>
                    )}
                </div>
            )}
        </div>
    );
};

const hslToRgb = (h: number, s: number, l: number): [number, number, number] => {
    s /= 100;
    l /= 100;
    const c = (1 - Math.abs(2 * l - 1)) * s;
    const x = c * (1 - Math.abs((h / 60) % 2 - 1));
    const m = l - c / 2;
    let r = 0, g = 0, b = 0;

    if (h >= 0 && h < 60) { [r, g, b] = [c, x, 0]; }
    else if (h >= 60 && h < 120) { [r, g, b] = [x, c, 0]; }
    else if (h >= 120 && h < 180) { [r, g, b] = [0, c, x]; }
    else if (h >= 180 && h < 240) { [r, g, b] = [0, x, c]; }
    else if (h >= 240 && h < 300) { [r, g, b] = [x, 0, c]; }
    else if (h >= 300 && h < 360) { [r, g, b] = [c, 0, x]; }
    
    return [Math.round((r + m) * 255), Math.round((g + m) * 255), Math.round((b + m) * 255)];
};

export const VulnerabilityReportDisplay: React.FC<{ result: VulnerabilityScanResult; scannedUrl: string }> = ({ result, scannedUrl }) => {
    const [isExporting, setIsExporting] = useState(false);

    const handleExportPDF = async () => {
        setIsExporting(true);
        try {
            const gaugeElement = document.getElementById('score-gauge-container');
            if (!gaugeElement) throw new Error("Score gauge element not found for export.");

            const exportButton = document.getElementById('export-button-vuln');
            if (exportButton) exportButton.style.visibility = 'hidden';
            await new Promise(r => setTimeout(r, 50));

            const isDark = document.documentElement.classList.contains('dark');
            const canvasBg = isDark ? 'hsl(222, 18%, 16%)' : 'hsl(220, 13%, 96%)';

            const gaugeCanvas = await html2canvas(gaugeElement, { scale: 2, useCORS: true, backgroundColor: canvasBg });
            const gaugeDataUrl = gaugeCanvas.toDataURL('image/png');

            if (exportButton) exportButton.style.visibility = 'visible';

            const pdf = new jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = pdf.internal.pageSize.getHeight();
            const margin = 15;
            const contentWidth = pdfWidth - (margin * 2);

            const primaryTextColor = isDark ? '#F1F5F9' : '#1E293B';
            const secondaryTextColor = isDark ? '#94A3B8' : '#64748B';
            const blueColor = '#3B82F6';

            const addHeaderAndFooter = (pageNum: number, totalPages: number) => {
                if (pageNum > 1) {
                    pdf.setFontSize(9); pdf.setTextColor(secondaryTextColor);
                    pdf.text('Vulnerability Scan Report', margin, 10);
                    pdf.text(`Page ${pageNum} of ${totalPages}`, pdfWidth - margin, 10, { align: 'right' });
                    pdf.setDrawColor(isDark ? '#334155' : '#E2E8F0');
                    pdf.line(margin, 12, pdfWidth - margin, 12);
                }
                pdf.setFontSize(8); pdf.setTextColor(secondaryTextColor);
                pdf.text(`Report for ${new URL(scannedUrl).hostname} | Generated by Cookie Care`, margin, pdfHeight - 10);
            };

            let yPos = 0;

            const checkPageBreak = (neededHeight: number) => {
                if (yPos + neededHeight > pdfHeight - 20) {
                    pdf.addPage();
                    yPos = 20;
                }
            };
            
            // --- PAGE 1: COVER ---
            pdf.setFillColor(isDark ? '#1E293B' : '#F8FAFC');
            pdf.rect(0, 0, pdfWidth, pdfHeight, 'F');
            pdf.setFont('helvetica', 'bold'); pdf.setFontSize(36); pdf.setTextColor(blueColor);
            pdf.text('Vulnerability Report', pdfWidth / 2, 80, { align: 'center' });
            pdf.setFont('helvetica', 'normal'); pdf.setFontSize(16); pdf.setTextColor(secondaryTextColor);
            pdf.text('Security Assessment For:', pdfWidth / 2, 110, { align: 'center' });
            pdf.setFont('helvetica', 'bold'); pdf.setFontSize(22); pdf.setTextColor(primaryTextColor);
            pdf.text(new URL(scannedUrl).hostname, pdfWidth / 2, 125, { align: 'center' });
            pdf.setFont('helvetica', 'normal'); pdf.setFontSize(12); pdf.setTextColor(secondaryTextColor);
            pdf.text(`Date of Scan: ${new Date().toLocaleDateString()}`, pdfWidth / 2, 150, { align: 'center' });
            
            // --- PAGE 2: SUMMARY ---
            pdf.addPage();
            yPos = 20;
            pdf.setFont('helvetica', 'bold'); pdf.setFontSize(18); pdf.setTextColor(primaryTextColor);
            pdf.text('Executive Summary', margin, yPos);
            yPos += 15;

            pdf.addImage(gaugeDataUrl, 'PNG', margin, yPos, 60, 60);
            
            pdf.setFontSize(12);
            pdf.text('Overall Risk Summary', margin + 70, yPos + 5);
            pdf.setFontSize(10); pdf.setFont('helvetica', 'normal'); pdf.setTextColor(secondaryTextColor);
            const summaryLines = pdf.splitTextToSize(result.overallRisk.summary, contentWidth - 80);
            pdf.text(summaryLines, margin + 70, yPos + 12);

            yPos += 80;

            pdf.setFont('helvetica', 'bold'); pdf.setFontSize(14); pdf.setTextColor(primaryTextColor);
            pdf.text('Findings Summary', margin, yPos);
            yPos += 10;
            // Draw findings summary table
            const summaryData = (['Critical', 'High', 'Medium', 'Low', 'Informational'] as RiskLevel[])
                .map(level => ({ level, count: result.findings.filter(f => f.riskLevel === level).length }))
                .filter(item => item.count > 0);
            
            summaryData.forEach(item => {
                pdf.setFontSize(11);
                
                const riskStyle = getRiskStyle(item.level);
                const riskColorHsl = riskStyle.chartFill.replace(/hsl\(|\)|%/g, '').split(',').map(s => parseInt(s.trim(), 10));
                const [r, g, b] = hslToRgb(riskColorHsl[0], riskColorHsl[1], riskColorHsl[2]);
                pdf.setTextColor(r, g, b);

                pdf.text(`● ${item.level}`, margin, yPos);
                pdf.setTextColor(primaryTextColor);
                pdf.text(`${item.count} finding(s)`, pdfWidth - margin, yPos, { align: 'right' });
                yPos += 8;
            });
            
            // --- FINDINGS PAGES ---
            pdf.addPage();
            yPos = 20;
            pdf.setFont('helvetica', 'bold'); pdf.setFontSize(18); pdf.setTextColor(primaryTextColor);
            pdf.text('Detailed Findings', margin, yPos);
            yPos += 10;

            result.findings.forEach(finding => {
                const { name, riskLevel, category, description, impact, evidence, remediation } = finding;
                const riskStyle = getRiskStyle(riskLevel);
                
                const titleHeight = 12;
                checkPageBreak(titleHeight + 50); // Estimate needed space for a finding
                
                const riskColorHsl = riskStyle.chartFill.replace(/hsl\(|\)|%/g, '').split(',').map(s => parseInt(s.trim(), 10));
                const [r, g, b] = hslToRgb(riskColorHsl[0], riskColorHsl[1], riskColorHsl[2]);
                pdf.setFillColor(r, g, b);
                
                pdf.rect(margin, yPos, contentWidth, titleHeight, 'F');
                pdf.setFont('helvetica', 'bold'); pdf.setFontSize(12); pdf.setTextColor('#FFFFFF');
                pdf.text(name, margin + 5, yPos + 8);
                pdf.setFontSize(10);
                pdf.text(riskLevel, pdfWidth - margin - 5, yPos + 8, { align: 'right' });
                yPos += titleHeight + 5;

                const drawSection = (title: string, text: string, titleColor = primaryTextColor) => {
                    const lines = pdf.splitTextToSize(text, contentWidth - 10);
                    const needed = 8 + lines.length * 5;
                    checkPageBreak(needed);
                    pdf.setFont('helvetica', 'bold'); pdf.setFontSize(10); pdf.setTextColor(titleColor);
                    pdf.text(title, margin, yPos);
                    yPos += 6;
                    pdf.setFont('helvetica', 'normal'); pdf.setFontSize(9); pdf.setTextColor(secondaryTextColor);
                    pdf.text(lines, margin, yPos);
                    yPos += lines.length * 5 + 3;
                };
                
                drawSection('Description', description);
                drawSection('Impact', impact);
                drawSection('Evidence', evidence, '#F59E0B');
                drawSection('Remediation', remediation, '#10B981');
                
                yPos += 8;
            });

            // --- FINAL PAGE NUMBERING ---
            const totalPages = pdf.getNumberOfPages();
            for (let i = 1; i <= totalPages; i++) {
                pdf.setPage(i);
                addHeaderAndFooter(i, totalPages);
            }

            pdf.save(`Vulnerability-Report-${new URL(scannedUrl).hostname}.pdf`);
        } catch (err) {
            console.error("PDF Export failed:", err);
            alert(`PDF export failed. ${err instanceof Error ? err.message : 'An unknown error occurred.'}`);
        } finally {
            setIsExporting(false);
        }
    };
    
    const riskCounts = result.findings.reduce((acc, v) => {
        const risk = v.riskLevel || 'Unknown';
        acc[risk] = (acc[risk] || 0) + 1;
        return acc;
    }, {} as Record<string, number>);

    return (
        <div className="max-w-7xl mx-auto animate-fade-in-up">
            <div id="pdf-export-area-vuln" className="bg-[var(--bg-primary)] p-2 sm:p-0">
                <div className="flex justify-between items-start mb-6">
                    <div>
                        <h3 className="text-2xl font-bold text-[var(--text-headings)]">Vulnerability Report</h3>
                        <p className="text-[var(--text-primary)] mt-1">
                        Report for: <a href={scannedUrl} target="_blank" rel="noopener noreferrer" className="font-semibold text-brand-blue hover:underline">{new URL(scannedUrl).hostname}</a>
                        </p>
                    </div>
                    <button
                        id="export-button-vuln"
                        onClick={handleExportPDF}
                        disabled={isExporting}
                        className="flex items-center justify-center gap-2 px-4 py-2 font-semibold text-sm text-brand-blue border border-brand-blue rounded-md hover:bg-brand-blue/10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-[var(--bg-primary)] focus:ring-brand-blue transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        <FileTextIcon className="h-4 w-4" />
                        {isExporting ? 'Exporting...' : 'Export to PDF'}
                    </button>
                </div>

                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    {/* Left Column: Summary & Score */}
                    <div className="lg:col-span-1 space-y-6">
                        <div id="score-gauge-container" className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6 flex flex-col items-center">
                            <ScoreGauge score={result.overallRisk.score} />
                            <div className="text-center mt-4">
                                <h4 className="text-lg font-bold text-[var(--text-headings)]">Overall Risk: <span className={getRiskStyle(result.overallRisk.level).text}>{result.overallRisk.level}</span></h4>
                                <p className="text-sm text-[var(--text-primary)] mt-2">{result.overallRisk.summary}</p>
                            </div>
                        </div>
                        <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6">
                             <h4 className="text-lg font-bold text-[var(--text-headings)] mb-4">Findings Summary</h4>
                             <div className="space-y-2">
                                 {(['Critical', 'High', 'Medium', 'Low', 'Informational'] as RiskLevel[]).map(level => {
                                     const count = riskCounts[level] || 0;
                                     if (count === 0 && !result.findings.some(f => f.riskLevel === level)) return null;
                                     const { text, icon } = getRiskStyle(level);
                                     return (
                                         <div key={level} className="flex items-center justify-between text-sm">
                                             <div className={`flex items-center gap-2 font-semibold ${text}`}>
                                                {icon}
                                                <span>{level} Risk</span>
                                             </div>
                                             <span className="font-bold text-[var(--text-headings)]">{count}</span>
                                         </div>
                                     )
                                 })}
                             </div>
                        </div>
                    </div>

                    {/* Right Column: Vulnerabilities */}
                    <div className="lg:col-span-2">
                         <div className="bg-[var(--bg-secondary)] rounded-lg border border-[var(--border-primary)] shadow-sm p-6">
                            <h4 className="text-lg font-bold text-[var(--text-headings)] mb-4">Vulnerabilities Found ({result.findings.length})</h4>
                            {result.findings.length > 0 ? (
                                <div className="space-y-4">
                                    {result.findings.map((finding, index) => <VulnerabilityCard key={index} finding={finding} />)}
                                </div>
                            ) : (
                                <div className="text-center py-12 border-2 border-dashed border-[var(--border-primary)] rounded-lg">
                                    <CheckCircleIcon className="mx-auto h-12 w-12 text-green-500" />
                                    <h3 className="mt-2 text-lg font-medium text-[var(--text-headings)]">No Vulnerabilities Found</h3>
                                    <p className="mt-1 text-sm text-[var(--text-primary)]">This passive scan did not identify any common vulnerabilities.</p>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
                <div className="text-center mt-12 text-xs text-[var(--text-primary)]/70">
                    <p><strong>Disclaimer:</strong> This report represents an exhaustive, non-intrusive audit based on an AI-powered analysis of publicly accessible data. For assessments requiring authentication or intrusive testing, a full-scope penetration test is recommended as a complementary exercise.</p>
                </div>
            </div>
        </div>
    );
};
