name: 'Build and Deploy to Cloud Run with Rollback'

on:
  push:
    branches:
      - main


env:
  PROJECT_ID: 'rd-dpo-and-security-app'   # ← Your actual project ID
  REGION: 'asia-south1'                   # ← Your region
  SERVICE: 'cookie-care'                  # ← Match your actual service name
  AR_REGION: 'asia-south1'               # ← Must match REGION
  REPO_NAME: 'cookie-care-repo'
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Docker Auth
        run: gcloud auth configure-docker ${{ env.AR_REGION }}-docker.pkg.dev --quiet

      - name: Build and Push Container
        run: |
          IMAGE_BASE="${{ env.AR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE }}"
          IMAGE_SHA="${IMAGE_BASE}:${{ github.sha }}"
          IMAGE_LATEST="${IMAGE_BASE}:latest"
          
          echo "Building and pushing $IMAGE_SHA and $IMAGE_LATEST..."
          
          docker build -t "$IMAGE_SHA" -t "$IMAGE_LATEST" .
          docker push "$IMAGE_SHA"
          docker push "$IMAGE_LATEST"
          
          echo "IMAGE_SHA=$IMAGE_SHA" >> $GITHUB_ENV
          echo "IMAGE_LATEST=$IMAGE_LATEST" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        id: deploy
        continue-on-error: true
        run: |
          gcloud run deploy ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --image=${IMAGE_LATEST} \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=2Gi \
            --cpu=1 \
            --timeout=300 \
            --concurrency=80 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NODE_ENV=production,API_KEY=${{ secrets.API_KEY }}" \
            --quiet

      - name: Rollback if Deployment Fails
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "❌ Deployment failed. Rolling back..."
          
          LAST_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --sort-by="~createTime" \
            --limit=2 \
            --format="value(metadata.name)" | tail -n1)
          
          if [ -z "$LAST_REVISION" ]; then
            echo "⚠️ No previous revision found to rollback to."
            exit 1
          fi
          
          echo "🔄 Rolling back to $LAST_REVISION..."
          gcloud run services update-traffic ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --to-revisions=$LAST_REVISION=100

      - name: Show Service URL
        if: steps.deploy.outcome == 'success'
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          echo "🚀 Service deployed successfully!"
          echo "📍 Service URL: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
