name: 'Build and Deploy to Cloud Run with Rollback'
on:
  push:
    branches:
      - main
env:
  PROJECT_ID: 'rd-dpo-and-security-app'
  REGION: 'asia-south1'
  SERVICE: 'cookie-care'
  AR_REGION: 'asia-south1'
  REPO_NAME: 'cookie-care-repo1'
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
          
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        
      - name: Docker Auth
        run: gcloud auth configure-docker ${{ env.AR_REGION }}-docker.pkg.dev --quiet
        
      - name: Debug API Key Secret
        run: |
          if [ -n "${{ secrets.API_KEY }}" ]; then
            echo "‚úÖ API_KEY secret is available (length: ${#API_KEY})"
          else
            echo "‚ùå API_KEY secret is missing"
            exit 1
          fi
        env:
          API_KEY: ${{ secrets.API_KEY }}
          
      - name: Build and Push Container
        run: |
          IMAGE_BASE="${{ env.AR_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.SERVICE }}"
          
          # Use timestamp + short SHA for unique tagging
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
          IMAGE_TAG="${IMAGE_BASE}:${TIMESTAMP}-${SHORT_SHA}"
          IMAGE_LATEST="${IMAGE_BASE}:latest"
          
          echo "üî® Building image with unique tag: $IMAGE_TAG"
          echo "üì¶ Also tagging as latest: $IMAGE_LATEST"
          
          # Force rebuild without cache to ensure fresh build
          docker build \
            --no-cache \
            --platform linux/amd64 \
            -t "$IMAGE_TAG" \
            -t "$IMAGE_LATEST" \
            .
          
          echo "üöÄ Pushing images..."
          docker push "$IMAGE_TAG"
          docker push "$IMAGE_LATEST"
          
          # Use the unique tag for deployment (not latest)
          echo "IMAGE_TO_DEPLOY=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE_LATEST=$IMAGE_LATEST" >> $GITHUB_ENV
          
          # Verify images were pushed
          echo "üîç Verifying image was pushed..."
          gcloud container images describe "$IMAGE_TAG" --format="value(image_summary.digest)"
          
      - name: Deploy to Cloud Run
        id: deploy
        continue-on-error: true
        run: |
          echo "üöÄ Deploying image: $IMAGE_TO_DEPLOY"
          
          # Deploy using the unique tagged image (not latest)
          gcloud run deploy ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --image="$IMAGE_TO_DEPLOY" \
            --platform=managed \
            --allow-unauthenticated \
            --port=8080 \
            --memory=1Gi \
            --cpu=1 \
            --timeout=300 \
            --concurrency=5 \
            --min-instances=0 \
            --max-instances=10 \
            --set-env-vars="NODE_ENV=production,API_KEY=${{ secrets.API_KEY }}" \
            --no-traffic \
            --tag="v$(date +%Y%m%d-%H%M%S)" \
            --quiet
            
          # Get the new revision name
          NEW_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --sort-by="~createTime" \
            --limit=1 \
            --format="value(metadata.name)")
          
          echo "üìã New revision created: $NEW_REVISION"
          echo "NEW_REVISION=$NEW_REVISION" >> $GITHUB_ENV
          
          # Gradually shift traffic to new revision (safer deployment)
          echo "üîÑ Shifting traffic to new revision..."
          gcloud run services update-traffic ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --to-revisions="$NEW_REVISION=100"
            
          # Verify deployment
          echo "‚úÖ Verifying deployment..."
          sleep 10
          
          # Get service URL
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --format="value(status.url)")
          
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
          
          # Test the health endpoint
          echo "üè• Testing health endpoint..."
          HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "$SERVICE_URL/health" || echo "000")
          echo "Health check response: $HEALTH_RESPONSE"
          
          if [[ "$HEALTH_RESPONSE" == *"200"* ]]; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            exit 1
          fi
        env:
          API_KEY: ${{ secrets.API_KEY }}
          
      - name: Verify API Key in Deployed Service
        if: steps.deploy.outcome == 'success'
        run: |
          echo "üîë Testing API key in deployed service..."
          
          # Test the debug endpoint
          API_STATUS=$(curl -s "$SERVICE_URL/debug-api-status" | jq -r '.apiKeyPresent // false')
          
          if [ "$API_STATUS" = "true" ]; then
            echo "‚úÖ API key is present in deployed service"
          else
            echo "‚ùå API key is missing in deployed service"
            echo "üîç Debug info:"
            curl -s "$SERVICE_URL/debug-api-status" | jq .
            exit 1
          fi
          
          # Test actual API functionality
          echo "üß™ Testing API functionality..."
          API_TEST=$(curl -s "$SERVICE_URL/test-api-key" | jq -r '.success // false')
          
          if [ "$API_TEST" = "true" ]; then
            echo "‚úÖ API key is working correctly"
          else
            echo "‚ùå API key test failed"
            curl -s "$SERVICE_URL/test-api-key" | jq .
          fi
          
      - name: Rollback if Deployment Fails
        if: steps.deploy.outcome == 'failure'
        run: |
          echo "‚ùå Deployment failed. Rolling back..."
          
          LAST_REVISION=$(gcloud run revisions list \
            --service=${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --sort-by="~createTime" \
            --limit=2 \
            --format="value(metadata.name)" | tail -n1)
          
          if [ -z "$LAST_REVISION" ]; then
            echo "‚ö†Ô∏è No previous revision found to rollback to."
            exit 1
          fi
          
          echo "üîÑ Rolling back to $LAST_REVISION..."
          gcloud run services update-traffic ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --to-revisions="$LAST_REVISION=100"
            
      - name: Show Deployment Results
        if: steps.deploy.outcome == 'success'
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üìç Service URL: $SERVICE_URL"
          echo "üè∑Ô∏è Image deployed: $IMAGE_TO_DEPLOY"
          echo "üìã Revision: $NEW_REVISION"
          
          # Show current traffic allocation
          echo "üìä Current traffic allocation:"
          gcloud run services describe ${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --format="table(spec.traffic[].revisionName,spec.traffic[].percent)"
            
          # Test a scan to make sure everything works
          echo "üîç Testing scan functionality..."
          curl -s "$SERVICE_URL/health" | jq .
          
      - name: Cleanup Old Revisions
        if: steps.deploy.outcome == 'success'
        run: |
          echo "üßπ Cleaning up old revisions (keeping last 5)..."
          
          # Get all revisions sorted by creation time (newest first)
          OLD_REVISIONS=$(gcloud run revisions list \
            --service=${{ env.SERVICE }} \
            --region=${{ env.REGION }} \
            --sort-by="~createTime" \
            --format="value(metadata.name)" | tail -n +6)
          
          if [ -n "$OLD_REVISIONS" ]; then
            echo "üóëÔ∏è Deleting old revisions:"
            echo "$OLD_REVISIONS"
            echo "$OLD_REVISIONS" | xargs -I {} gcloud run revisions delete {} \
              --region=${{ env.REGION }} \
              --quiet
          else
            echo "‚úÖ No old revisions to clean up"
          fi
